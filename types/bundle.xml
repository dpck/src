<types namespace="_depack">
  <import from="static-analysis" ns="_staticAnalysis" name="Detection"
    link="https://github.com/dpck/static-analysis#type-detection"
  />
  <type record name="BundleBase" desc="Options for the web bundler.">
    <prop string name="tempDir" default="depack-temp">
      Where to save prepared JSX files.
    </prop>
    <prop boolean name="preact" default="false">
      Adds `import { h } from 'preact'` automatically, so that the bundle will be compiled **together** with _Preact_.
    </prop>
    <prop boolean name="silent" default="false">
      If output is not given, don't print to `stdout`. By default, the output will be printed.
    </prop>
    <prop boolean name="preactExtern" default="false">
      Adds `import { h } from '＠preact/extern'` automatically, assuming that `preact` will be available in the global scope and won't be included in the compilation. It will also rename any `preact` imports into `＠externs/preact`, so that the actual source code does not need manual editing.
    </prop>
  </type>
  <type record extends="_depack.BundleBase"
    name="BundleConfig" desc="Options for the Bundle method.">
    <prop string name="src">
      The entry file to bundle. Only a single file is accepted. To compile multiple files at once, use chunks.
    </prop>
  </type>
  <type record extends="_depack.BundleBase"
    name="ChunksConfig" desc="Options for the BundleChunks method.">
    <prop type="!Array<string>" name="srcs">
      The entry files to bundle. Chunks will be created according to the strategy (only `common` strategy is supported at the moment, which places any dependency which is required in more than one file in a `common` chunk).
    </prop>
    <fn async name="checkCache" return="boolean|undefined" opt>
      <arg type="!Array<!_staticAnalysis.Detection>" name="analysis">
        New static analysis result.
      </arg>
      A function to be executed to compare the an existing static analysis result with the new one, to see if any files/dependencies were updated. Should return `true` when caches match to skip processing and return void.
    </fn>
  </type>
</types>